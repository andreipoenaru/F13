#include <cstdio>
#include <cstring>
#define modul 9901
 #include<iostream>
using namespace std;

int N[1005]	,K, i;
int MAT[101][101], SOL[101][101];
int a[101],b[101];

void sub(int A[], int B[])
{
      int i, t = 0;
      for (i = 1; i <= A[0]; i++) {
              A[i] -= ((i <= B[0]) ? B[i] : 0) + t;
              A[i] += (t = A[i] < 0) * 10;
      }
      for (; A[0] > 1 && !A[A[0]]; A[0]--);
}

int mod(int A[], int B)
{
      int i, t = 0;
      for (i = A[0]; i > 0; i--)
              t = (t * 10 + A[i]) % B;
      return t;
}

inline void mult(int A[][101], int B[][101], int C[][101]) {
    int i, j, k;
    for (i = 0; i <K; i++)
        for (j = 0; j < K; j++)
            for (k = 0; k < K; k++) 
                C[i][j] = (C[i][j] + 1LL * A[i][k] * B[k][j]) % modul;
             
}
void div(int A[], int B)
{
      int i, t = 0;
      for (i = A[0]; i > 0; i--, t %= B)
              A[i] = (t = t * 10 + A[i]) / B;
      for (; A[0] > 1 && !A[A[0]]; A[0]--);
}
inline void lg_power(int M[][101]) {
    int C[101][101], AUX[101][101], i;
     
    memcpy(C, MAT, sizeof(MAT));
	for (i=0; i<K; i++) M[i][i]=1;
	int aux=0;
	while (!(N[0]==1 && N[1]==0))
	{
		aux++;
        if (mod(N,2)==1) {
            memset(AUX, 0, sizeof(AUX));
            mult(M, C, AUX);
            memcpy(M, AUX, sizeof(AUX));
        }
 
        memset(AUX, 0, sizeof(AUX));
        mult(C, C, AUX);
        memcpy(C, AUX, sizeof(C));
		div(N,2);
    }
}
 
int main() 
{
    freopen("extensionacci.in", "r", stdin);
    freopen("extensionacci.out", "w", stdout);
    char c[1000];
	fgets(c,1000,stdin);
	int i=0;
	while (c[i]<='9' && c[i]>='0')
		K=K*10+c[i]-'0',i++;
	i++;
	while (c[i]>='0' && c[i]<='9') N[++N[0]]=c[i]-'0',i++;
	for (i=1; i<=N[0]/2; i++)
		swap(N[i],N[N[0]-i+1]);
	int rez=0;
	for (int i=1; i<=K; i++)
		scanf ("%d",&a[i]);
	for (int i=1; i<=K; i++)
		scanf ("%d",&b[i]),MAT[i-1][K-1]=b[i];
	for (int i=0; i<K-1; i++)
		MAT[i+1][i]=1;
	int unu[2];
	unu[1]=unu[0]=1;
	sub(N,unu);
    lg_power(SOL);
   for (int i=0; i<K; i++)
   {
	   rez+=a[i+1]*SOL[i][0];
	   rez=rez%modul;
   }
   cout<<rez<<"\n";
    return 0;
}
